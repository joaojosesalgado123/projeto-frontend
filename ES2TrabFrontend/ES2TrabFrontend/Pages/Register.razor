@page "/register"
@using ES2TrabFrontend.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Criar Conta</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="nomeInput">Nome:</label>
        <InputText id="nomeInput" @bind-Value="registerModel.Nome" class="form-control" />
    </div>

    <div>
        <label for="numHorasInput">Número de Horas:</label>
        <InputNumber id="numHorasInput" @bind-Value="registerModel.NumHoras" class="form-control" />
    </div>

    <div>
        <label for="usernameInput">Username:</label>
        <InputText id="usernameInput" @bind-Value="registerModel.Username" class="form-control" />
    </div>

    <div>
        <label for="passwordInput">Password:</label>
        <InputText id="passwordInput" type="password" @bind-Value="registerModel.Password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Registar</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <p>@message</p>
}

<div class="register-text">
    <p>Já tem conta? <a @onclick="NavigateToLogin" style="cursor:pointer">Voltar ao login</a></p>
</div>

@code {
    private RegisterRequest registerModel = new RegisterRequest(); // Usar RegisterRequest, não Utilizador
    private string message = string.Empty;

    private async Task HandleRegister()
    {
        Console.WriteLine($"Nome: {registerModel.Nome}, NumHoras: {registerModel.NumHoras}, Username: {registerModel.Username}");

        var response = await Http.PostAsJsonAsync("api/auth/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            message = "✅ Conta criada com sucesso! Vai ser redirecionado em 2 segundos.";
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            message = $"❌ Erro ao criar conta: {error}";
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}
